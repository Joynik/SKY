# Assume Python 3.13
target-version = "py313"
cache-dir = ".ruff_cache"

# Enumerate all fixed violations.
# show-fixes = false
# unsafe-fixes = false

src = ["src"]

# Same as Black.
line-length = 100
indent-width = 4

# Exclude a variety of commonly ignored directories.
exclude = [
    ".vscode",
    ".idea",
    ".git",
    ".venv",
    "venv",
    ".pytest_cache",
    ".ruff_cache",
    ".mypy_cache",
    "__pypackages__",
    "node_modules",
    "**/migrations/versions/**",
    "**/alembic/versions/**",
]
include = ["*.py"]


[format]

preview = true

# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# This is currently disabled by default, but it is planned for this to be opt-out in the future.
docstring-code-format = true

# This only has an effect when the `docstring-code-format` setting is enabled.
docstring-code-line-length = 100 #"dynamic"


[lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "A",      # flake8-annotations
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "PD",     # flake8-pydantic
    "PT",     # flake8-pytest-style
    "FAST",   # FastAPI
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
    "B904", # Allow raising exceptions without from e, for HTTPException
    "I001", # isort: import not formatted correctly
]

[lint.isort]
from-first = false
order-by-type = true
lines-between-types = 1
lines-after-imports = 2
combine-as-imports = true
force-single-line = false
section-order = [
    "future",
    "standard-library",
    "testing",
    "first-party",
    "third-party",
    "local-folder",
]
known-local-folder = ["src"]
known-first-party = []
known-third-party = []

[lint.isort.sections]
testing = ["pytest", "pytest_asyncio", "unittest.mock"]

[lint.pydocstyle]
convention = "google"

[lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[lint.per-file-ignores]
"**/utils/fastapi_limiter.py" = ["ARG001"]
# Tests
"tests/*" = ["B011", "PT015"]
"tests/conftest.py" = ["ARG001"]
